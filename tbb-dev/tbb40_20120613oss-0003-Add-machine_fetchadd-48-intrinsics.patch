From 327bde31309e8ce049f427f538c30af567d3783e Mon Sep 17 00:00:00 2001
From: Steve Capper <steve.capper@linaro.org>
Date: Tue, 28 Aug 2012 07:20:08 -0400
Subject: [PATCH 3/3] Add machine_fetchadd[48] intrinsics.

Unfortunately ittnotify also requires its own copy of fetchadd4.

Signed-off-by: Steve Capper <steve.capper@linaro.org>
---
 include/tbb/machine/linux_armv7.h    | 49 ++++++++++++++++++++++++++++++++++--
 src/tbb/tools_api/ittnotify.h        |  2 +-
 src/tbb/tools_api/ittnotify_config.h | 32 ++++++++++++++++++++++-
 3 files changed, 79 insertions(+), 4 deletions(-)

diff --git a/include/tbb/machine/linux_armv7.h b/include/tbb/machine/linux_armv7.h
index 517d419..5288236 100644
--- a/include/tbb/machine/linux_armv7.h
+++ b/include/tbb/machine/linux_armv7.h
@@ -128,6 +128,53 @@ static inline int64_t __TBB_machine_cmpswp8(volatile void *ptr, int64_t value, i
     return oldval;
 }
 
+static inline int32_t __TBB_machine_fetchadd4(volatile void* ptr, int32_t addend)
+{
+    unsigned long tmp;
+    int32_t result, tmp2;
+
+    __TBB_full_memory_fence();
+
+    __asm__ __volatile__(
+"1:     ldrex   %0, [%4]\n"
+"       add     %3, %0, %5\n"
+"       strex   %1, %3, [%4]\n"
+"       cmp     %1, #0\n"
+"       bne     1b\n"
+    : "=&r" (result), "=&r" (tmp), "+Qo" (*(volatile int32_t*)ptr), "=&r"(tmp2)
+    : "r" ((int32_t *)ptr), "Ir" (addend)
+    : "cc");
+
+    __TBB_full_memory_fence();
+
+    return result;
+}
+
+static inline int64_t __TBB_machine_fetchadd8(volatile void *ptr, int64_t addend)
+{
+    unsigned long tmp;
+    int64_t result, tmp2;
+    
+    __TBB_full_memory_fence();
+
+    __asm__ __volatile__(
+"1:     ldrexd  %0, %H0, [%4]\n"
+"       adds    %3, %0, %5\n"
+"       adc     %H3, %H0, %H5\n"
+"       strexd  %1, %3, %H3, [%4]\n"
+"       cmp     %1, #0\n"
+"       bne     1b"
+    : "=&r" (result), "=&r" (tmp), "+Qo" (*(volatile int64_t*)ptr), "=&r"(tmp2)
+    : "r" ((int64_t *)ptr), "r" (addend)
+    : "cc");
+
+
+    __TBB_full_memory_fence();
+
+    return result;
+}
+
+
 inline void __TBB_machine_pause (int32_t delay )
 {
     while(delay>0)
@@ -169,9 +216,7 @@ namespace internal {
 #define __TBB_USE_GENERIC_PART_WORD_CAS				1
 #define __TBB_USE_GENERIC_PART_WORD_FETCH_ADD			1
 #define __TBB_USE_GENERIC_PART_WORD_FETCH_STORE			1
-#define __TBB_USE_GENERIC_FETCH_ADD				1
 #define __TBB_USE_GENERIC_FETCH_STORE				1
 #define __TBB_USE_GENERIC_HALF_FENCED_LOAD_STORE		1
 #define __TBB_USE_GENERIC_DWORD_LOAD_STORE			1
 #define __TBB_USE_GENERIC_SEQUENTIAL_CONSISTENCY_LOAD_STORE	1
-
diff --git a/src/tbb/tools_api/ittnotify.h b/src/tbb/tools_api/ittnotify.h
index a3935bf..feee5c3 100644
--- a/src/tbb/tools_api/ittnotify.h
+++ b/src/tbb/tools_api/ittnotify.h
@@ -152,7 +152,7 @@ The same ID may not be reused for different instances, unless a previous
 #  if ITT_PLATFORM==ITT_PLATFORM_WIN
 #    define CDECL __cdecl
 #  else /* ITT_PLATFORM==ITT_PLATFORM_WIN */
-#    if defined _M_X64 || defined _M_AMD64 || defined __x86_64__
+#    if defined _M_X64 || defined _M_AMD64 || defined __x86_64__ || defined __arm__
 #      define CDECL /* not actual on x86_64 platform */
 #    else  /* _M_X64 || _M_AMD64 || __x86_64__ */
 #      define CDECL __attribute__ ((cdecl))
diff --git a/src/tbb/tools_api/ittnotify_config.h b/src/tbb/tools_api/ittnotify_config.h
index fe1c1c6..7f007a6 100644
--- a/src/tbb/tools_api/ittnotify_config.h
+++ b/src/tbb/tools_api/ittnotify_config.h
@@ -86,7 +86,7 @@
 #  if ITT_PLATFORM==ITT_PLATFORM_WIN
 #    define CDECL __cdecl
 #  else /* ITT_PLATFORM==ITT_PLATFORM_WIN */
-#    if defined _M_X64 || defined _M_AMD64 || defined __x86_64__
+#    if defined _M_X64 || defined _M_AMD64 || defined __x86_64__ || defined __arm__
 #      define CDECL /* not actual on x86_64 platform */
 #    else  /* _M_X64 || _M_AMD64 || __x86_64__ */
 #      define CDECL __attribute__ ((cdecl))
@@ -144,11 +144,17 @@
 #  define ITT_ARCH_IA64  3
 #endif /* ITT_ARCH_IA64 */
 
+#ifndef ITT_ARCH_ARM
+#  define ITT_ARCH_ARM   4
+#endif /* ITT_ARCH_ARM */
+
 #ifndef ITT_ARCH
 #  if defined _M_X64 || defined _M_AMD64 || defined __x86_64__
 #    define ITT_ARCH ITT_ARCH_IA32E
 #  elif defined _M_IA64 || defined __ia64
 #    define ITT_ARCH ITT_ARCH_IA64
+#  elif defined __arm__
+#    define ITT_ARCH ITT_ARCH_ARM
 #  else
 #    define ITT_ARCH ITT_ARCH_IA32
 #  endif
@@ -258,6 +264,30 @@ INLINE int __itt_interlocked_increment(volatile long* ptr)
 #else  /* __INTEL_COMPILER */
 /* TODO: Add Support for not Intel compilers for IA64 */
 #endif /* __INTEL_COMPILER */
+#elif ITT_ARCH==ITT_ARCH_ARM
+#define __TBB_armv7_inner_shareable_barrier() __asm__ __volatile__("dmb ish": : :"memory")
+#define __TBB_full_memory_fence() __TBB_armv7_inner_shareable_barrier()
+INLINE int32_t __TBB_machine_fetchadd4(volatile void* ptr, int32_t addend)
+{
+    unsigned long tmp;
+    int32_t result, tmp2;
+
+    __TBB_full_memory_fence();
+
+    __asm__ __volatile__(
+"1:     ldrex   %0, [%4]\n"
+"       add     %3, %0, %5\n"
+"       strex   %1, %3, [%4]\n"
+"       cmp     %1, #0\n"
+"       bne     1b\n"
+    : "=&r" (result), "=&r" (tmp), "+Qo" (*(volatile int32_t*)ptr), "=&r"(tmp2)
+    : "r" ((int32_t *)ptr), "Ir" (addend)
+    : "cc");
+
+    __TBB_full_memory_fence();
+
+    return result;
+}
 #else /* ITT_ARCH!=ITT_ARCH_IA64 */
 INLINE int __TBB_machine_fetchadd4(volatile void* ptr, long addend)
 {
-- 
1.7.11.4

