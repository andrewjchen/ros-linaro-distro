From 2abd332fee526be68a0c30d1175599056a79f917 Mon Sep 17 00:00:00 2001
From: Steve Capper <steve.capper@linaro.org>
Date: Tue, 28 Aug 2012 04:11:16 -0400
Subject: [PATCH 1/3] Endianness

Fix the __TBB_BIG_ENDIAN preprocessor logic to correctly identify
the unknown (at compile time) endianess check.

Signed-off-by: Steve Capper <steve.capper@linaro.org>
---
 include/tbb/tbb_machine.h | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/include/tbb/tbb_machine.h b/include/tbb/tbb_machine.h
index 6c83942..803fcda 100644
--- a/include/tbb/tbb_machine.h
+++ b/include/tbb/tbb_machine.h
@@ -378,10 +378,12 @@ void spin_wait_until_eq( const volatile T& location, const U value ) {
 //  - The operation assumes that the architecture consistently uses either little-endian or big-endian:
 //      it does not support mixed-endian or page-specific bi-endian architectures.
 // This function is the only use of __TBB_BIG_ENDIAN.
-#if (__TBB_BIG_ENDIAN!=-1)
+#if (__TBB_BIG_ENDIAN==-1)
     #if ( __TBB_USE_GENERIC_PART_WORD_CAS)
         #error generic implementation of part-word CAS was explicitly disabled for this configuration
     #endif
+#endif
+
 template<typename T>
 inline T __TBB_MaskedCompareAndSwap (volatile T * const ptr, const T value, const T comparand ) {
     struct endianness{ static bool is_big_endian(){
@@ -419,7 +421,6 @@ inline T __TBB_MaskedCompareAndSwap (volatile T * const ptr, const T value, cons
         else continue;                                     // CAS failed but the bits of interest left unchanged
     }
 }
-#endif
 template<size_t S, typename T>
 inline T __TBB_CompareAndSwapGeneric (volatile void *ptr, T value, T comparand );
 
-- 
1.7.11.4

