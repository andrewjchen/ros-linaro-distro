From 5690a53639758f6a15c0d2a60acea4aa86ae9209 Mon Sep 17 00:00:00 2001
From: Steve Capper <steve.capper@linaro.org>
Date: Tue, 28 Aug 2012 07:11:51 -0400
Subject: [PATCH 2/3] ARM support.

Add ARMv7 support to libTBB.

Signed-off-by: Steve Capper <steve.capper@linaro.org>
---
 build/linux.gcc.inc               |   5 ++
 build/linux.inc                   |   6 ++
 include/tbb/machine/linux_armv7.h | 177 ++++++++++++++++++++++++++++++++++++++
 include/tbb/tbb_machine.h         |   2 +
 src/tbbmalloc/frontend.cpp        |   8 +-
 src/test/harness.h                |   2 +-
 6 files changed, 198 insertions(+), 2 deletions(-)
 create mode 100644 include/tbb/machine/linux_armv7.h

diff --git a/build/linux.gcc.inc b/build/linux.gcc.inc
index 8e455a8..7871fc2 100644
--- a/build/linux.gcc.inc
+++ b/build/linux.gcc.inc
@@ -110,6 +110,11 @@ ifeq (sparc,$(arch))
     LIB_LINK_FLAGS += -mcpu=v9 -m64
 endif
 
+# automatically generate "IT" instructions when compiling for Thumb ISA 
+ifeq (armv7,$(arch))
+    CPLUS_FLAGS    += -Wa,-mimplicit-it=thumb
+endif
+
 #------------------------------------------------------------------------------
 # Setting assembler data.
 #------------------------------------------------------------------------------
diff --git a/build/linux.inc b/build/linux.inc
index a27408f..a098b57 100644
--- a/build/linux.inc
+++ b/build/linux.inc
@@ -56,6 +56,9 @@ ifndef arch
         ifeq ($(uname_m),sparc64)
                 export arch:=sparc
         endif
+        ifeq ($(uname_m),armv7l)
+                export arch:=armv7
+        endif
         ifndef arch
                 export arch:=$(uname_m)
         endif
@@ -103,6 +106,9 @@ endif
 ifeq ($(arch),sparc)
         def_prefix = lin64
 endif
+ifeq ($(arch),armv7)
+        def_prefix = lin32
+endif
 ifeq (,$(def_prefix))
     ifeq (64,$(findstring 64,$(arch)))
             def_prefix = lin64
diff --git a/include/tbb/machine/linux_armv7.h b/include/tbb/machine/linux_armv7.h
new file mode 100644
index 0000000..517d419
--- /dev/null
+++ b/include/tbb/machine/linux_armv7.h
@@ -0,0 +1,177 @@
+/*
+    Copyright 2012 ARM Limited  All Rights Reserved.
+
+    This file is part of Threading Building Blocks.
+
+    Threading Building Blocks is free software; you can redistribute it
+    and/or modify it under the terms of the GNU General Public License
+    version 2 as published by the Free Software Foundation.
+
+    Threading Building Blocks is distributed in the hope that it will be
+    useful, but WITHOUT ANY WARRANTY; without even the implied warranty
+    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with Threading Building Blocks; if not, write to the Free Software
+    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+
+    As a special exception, you may use this file as part of a free software
+    library without restriction.  Specifically, if other files instantiate
+    templates or use macros or inline functions from this file, or you compile
+    this file and link it with other files to produce an executable, this
+    file does not by itself cause the resulting executable to be covered by
+    the GNU General Public License.  This exception does not however
+    invalidate any other reasons why the executable file might be covered by
+    the GNU General Public License.
+*/
+
+/*
+    This is the TBB implementation for the ARMv7-a architecture.
+*/ 
+
+#ifndef __TBB_machine_H
+#error Do not include this file directly; include tbb_machine.h instead
+#endif
+
+#if !(__ARM_ARCH_7A__)
+#error Threading Building Blocks ARM port requires an ARMv7-a architecture.
+#endif
+
+#include <sys/param.h>
+#include <unistd.h>
+
+#define __TBB_WORDSIZE 4
+
+#ifndef __BYTE_ORDER__
+    // Hopefully endianness can be validly determined at runtime.
+    // This may silently fail in some embedded systems with page-specific endianness.
+#elif __BYTE_ORDER__==__ORDER_BIG_ENDIAN__
+    #define __TBB_BIG_ENDIAN 1
+#elif __BYTE_ORDER__==__ORDER_LITTLE_ENDIAN__
+    #define __TBB_BIG_ENDIAN 0
+#else
+    #define __TBB_BIG_ENDIAN -1 // not currently supported
+#endif
+                 
+
+#define __TBB_compiler_fence() __asm__ __volatile__("": : :"memory")
+#define __TBB_control_consistency_helper() __TBB_compiler_fence()
+
+#define __TBB_armv7_inner_shareable_barrier() __asm__ __volatile__("dmb ish": : :"memory")
+#define __TBB_acquire_consistency_helper() __TBB_armv7_inner_shareable_barrier()
+#define __TBB_release_consistency_helper() __TBB_armv7_inner_shareable_barrier()
+#define __TBB_full_memory_fence() __TBB_armv7_inner_shareable_barrier()
+
+
+//--------------------------------------------------
+// Compare and swap
+//--------------------------------------------------
+
+/**
+ * Atomic CAS for 32 bit values, if *ptr==comparand, then *ptr=value, returns *ptr
+ * @param ptr pointer to value in memory to be swapped with value if *ptr==comparand
+ * @param value value to assign *ptr to if *ptr==comparand
+ * @param comparand value to compare with *ptr
+ * @return value originally in memory at ptr, regardless of success
+*/
+static inline int32_t __TBB_machine_cmpswp4(volatile void *ptr, int32_t value, int32_t comparand )
+{
+    int32_t oldval, res;
+
+    __TBB_full_memory_fence();
+    
+    do {
+    __asm__ __volatile__(
+        "ldrex      %1, [%3]\n"
+        "mov        %0, #0\n"
+        "cmp        %1, %4\n"
+        "strexeq    %0, %5, [%3]\n"
+        : "=&r" (res), "=&r" (oldval), "+Qo" (*(volatile int32_t*)ptr)
+        : "r" ((int32_t *)ptr), "Ir" (comparand), "r" (value)
+        : "cc");
+    } while (res);
+
+    __TBB_full_memory_fence();
+
+    return oldval;
+}
+
+/**
+ * Atomic CAS for 64 bit values, if *ptr==comparand, then *ptr=value, returns *ptr
+ * @param ptr pointer to value in memory to be swapped with value if *ptr==comparand
+ * @param value value to assign *ptr to if *ptr==comparand
+ * @param comparand value to compare with *ptr
+ * @return value originally in memory at ptr, regardless of success
+ */
+static inline int64_t __TBB_machine_cmpswp8(volatile void *ptr, int64_t value, int64_t comparand )
+{
+    int64_t oldval;
+    int32_t res;
+
+    __TBB_full_memory_fence();
+
+    do {
+        __asm__ __volatile__(
+            "mov        %0, #0\n"
+            "ldrexd     %1, %H1, [%3]\n"
+            "cmp        %1, %4\n"
+            "cmpeq      %H1, %H4\n"
+            "strexdeq   %0, %5, %H5, [%3]"
+        : "=&r" (res), "=&r" (oldval), "+Qo" (*(volatile int64_t*)ptr)
+        : "r" ((int64_t *)ptr), "r" (comparand), "r" (value)
+        : "cc");
+    } while (res);
+
+    __TBB_full_memory_fence();
+
+    return oldval;
+}
+
+inline void __TBB_machine_pause (int32_t delay )
+{
+    while(delay>0)
+    {
+	__TBB_compiler_fence();
+        delay--;
+    }
+}
+
+namespace tbb {
+namespace internal {
+    template <typename T, size_t S>
+    struct machine_load_store_relaxed {
+        static inline T load ( const volatile T& location ) {
+            const T value = location;
+
+            /*
+            * An extra memory barrier is required for errata #761319
+            * Please see http://infocenter.arm.com/help/topic/com.arm.doc.uan0004a
+            */
+            __TBB_armv7_inner_shareable_barrier();
+            return value;
+        }
+
+        static inline void store ( volatile T& location, T value ) {
+            location = value;
+        }
+    };
+}} // namespaces internal, tbb
+
+// Machine specific atomic operations
+
+#define __TBB_CompareAndSwap4(P,V,C) __TBB_machine_cmpswp4(P,V,C)
+#define __TBB_CompareAndSwap8(P,V,C) __TBB_machine_cmpswp8(P,V,C)
+#define __TBB_CompareAndSwapW(P,V,C) __TBB_machine_cmpswp4(P,V,C)
+#define __TBB_Pause(V) __TBB_machine_pause(V)
+
+// Use generics for some things
+#define __TBB_USE_GENERIC_PART_WORD_CAS				1
+#define __TBB_USE_GENERIC_PART_WORD_FETCH_ADD			1
+#define __TBB_USE_GENERIC_PART_WORD_FETCH_STORE			1
+#define __TBB_USE_GENERIC_FETCH_ADD				1
+#define __TBB_USE_GENERIC_FETCH_STORE				1
+#define __TBB_USE_GENERIC_HALF_FENCED_LOAD_STORE		1
+#define __TBB_USE_GENERIC_DWORD_LOAD_STORE			1
+#define __TBB_USE_GENERIC_SEQUENTIAL_CONSISTENCY_LOAD_STORE	1
+
diff --git a/include/tbb/tbb_machine.h b/include/tbb/tbb_machine.h
index 803fcda..f12f6ba 100644
--- a/include/tbb/tbb_machine.h
+++ b/include/tbb/tbb_machine.h
@@ -218,6 +218,8 @@ template<> struct atomic_selector<8> {
         #include "machine/linux_ia64.h"
     #elif __powerpc__
         #include "machine/mac_ppc.h"
+    #elif __arm__ 
+        #include "machine/linux_armv7.h"
     #elif __TBB_GCC_BUILTIN_ATOMICS_PRESENT
         #include "machine/gcc_generic.h"
     #endif
diff --git a/src/tbbmalloc/frontend.cpp b/src/tbbmalloc/frontend.cpp
index 7002e71..02c7838 100644
--- a/src/tbbmalloc/frontend.cpp
+++ b/src/tbbmalloc/frontend.cpp
@@ -615,7 +615,13 @@ static inline unsigned int highestBitPos(unsigned int n)
 # else
 #   error highestBitPos() not implemented for this platform
 # endif
-
+#elif __arm__
+    __asm__ __volatile__
+    (
+       "clz %0, %1\n"
+       "rsb %0, %0, %2\n"
+       :"=r" (pos) :"r" (n), "I" (31)
+    );
 #else
     static unsigned int bsr[16] = {0/*N/A*/,6,7,7,8,8,8,8,9,9,9,9,9,9,9,9};
     pos = bsr[ n>>6 ];
diff --git a/src/test/harness.h b/src/test/harness.h
index e435b39..6cff55e 100644
--- a/src/test/harness.h
+++ b/src/test/harness.h
@@ -348,7 +348,7 @@ public:
         // Therefore we set the stack size explicitly (as for TBB worker threads).
 // TODO: make a single definition of MByte used by all tests.
         const size_t MByte = 1024*1024;
-#if __i386__||__i386
+#if __i386__||__i386||__arm__
         const size_t stack_size = 1*MByte;
 #elif __x86_64__
         const size_t stack_size = 2*MByte;
-- 
1.7.11.4

